{"version":3,"sources":["Redux/types/todo.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Pages/NotFoundPage/NotFoundPage.tsx","Components/HomeTextAnimation/HomeAnimation.tsx","Pages/HomePage/HomePage.tsx","Redux/actionCreators/todoActions.ts","Components/Todo/Todo.tsx","hooks/useTypedSelector.ts","Components/Chart/ChartColumn/ChartColumn.tsx","Components/Chart/Chart.tsx","Pages/Completed/Completed.tsx","Components/Modal/Modal.tsx","hooks/useInput.ts","hooks/useValidation.ts","Pages/AllTodos/AllToodos.tsx","Pages/NotCompletedTodos/NotCompletedTodos.tsx","App.tsx","reportWebVitals.ts","Redux/reducers/todoReducer.ts","Redux/reducers/index.ts","Redux/index.ts","index.tsx"],"names":["TodoActionTypes","Header","StyledHeader","StyledTitle","styled","div","h1","Navbar","isNavbarOpen","navbarToggle","activeLinkStyle","color","cursor","StyledNavbar","StyledLinkWrapper","StyledNavLink","to","activeStyle","className","StyledSpan","StyledToggleButton","onClick","NavLink","span","NotFoundPage","StyledNotFoundPage","StyledSubTitle","HomeAnimation","HomePage","StyledHomePage","todoCompleteToggle","id","type","TODO_COMPLETED_TOGGLE","payload","Todo","day","text","isCompleted","desc","dispatch","useDispatch","StyledTodo","StyledTodoContent","StyledCheckbox","FlexWrapper","StyledTodoText","StyledDayTitle","StyledCloseIcon","DELETE_TODO","deleteTodo","p","useTypedSelector","useSelector","ChartColumn","label","todoCount","height","StyledColumn","ChartBar","data","labels","maxOfArr","Math","max","StyledChartBar","map","el","i","Completed","todos","state","daysOfWeek","count","forEach","completed","push","StyledCompletedPage","filter","todo","makeTodoCompleted","Chart","Modal","active","setActive","children","StyledModal","StyledModalContent","e","stopPropagation","useInput","initialValue","validations","useState","value","setValue","isDirty","setDirty","valid","isEmpty","setEmpty","minLengthError","setMinLengthError","isInputValid","setInputValid","useEffect","validation","length","useValidation","onChange","target","onBlur","clearValue","AllTodos","todoAnchorRef","useRef","todoText","minLength","StyledAllTodos","StyledInputLabel","htmlFor","style","StyledTextInput","StyledAddTodoBtn","disabled","ADD_TODO","addTodo","setTimeout","current","scrollIntoView","behavior","ref","StyledModalBtn","fontSize","button","input","NotCompletedTodos","StyledNotCompletedPage","App","setNavbarOpen","display","prevState","path","exact","component","from","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","localStorage","JSON","parse","rootReducer","combineReducers","action","prevTodo","Date","getDay","dayEnglish","newTodo","store","createStore","subscribe","stringify","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.828e662f.chunk.js","sourcesContent":["export type TodoType = {\r\n    id: number,\r\n    text: string,\r\n    day: string,\r\n    completed: boolean,\r\n    desc?: string | undefined,\r\n}\r\n\r\nexport enum TodoActionTypes {\r\n    TODO_COMPLETED_TOGGLE = 'TODO_COMPLETED_TOGGLE',\r\n    DELETE_TODO = 'DELETE_TODO',\r\n    ADD_TODO = 'ADD_TODO',\r\n}\r\n\r\nexport interface TodoCompletedToggleType {\r\n    type: TodoActionTypes.TODO_COMPLETED_TOGGLE,\r\n    payload: number\r\n}\r\n\r\nexport interface AddTodoType {\r\n    type: TodoActionTypes.ADD_TODO,\r\n    payload: string,\r\n}\r\n\r\nexport interface DeleteTodoType {\r\n    type: TodoActionTypes.DELETE_TODO,\r\n    payload: number,\r\n}\r\n\r\nexport interface todoState {\r\n    todos: Array<TodoType>\r\n}\r\n\r\nexport type TodoActions = TodoCompletedToggleType | DeleteTodoType | AddTodoType\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <StyledHeader>\r\n            {/*Логотип*/}\r\n            <StyledTitle>JetBrains TodoList</StyledTitle>\r\n        </StyledHeader>\r\n    )\r\n}\r\nexport default Header\r\n\r\nconst StyledHeader = styled.div`\r\n    background-color: #21212B;\r\n    height: 80px;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledTitle = styled.h1`\r\n    margin-left: 50px;\r\n    font-size: 18px;\r\n    font-family: Roboto, sans-serif;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n`\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\ntype PropsTypes = {\r\n    isNavbarOpen: boolean\r\n    navbarToggle: () => void\r\n}\r\n\r\nconst Navbar: React.FC<PropsTypes> = ({isNavbarOpen, navbarToggle}) => {\r\n    // Стили для активной ссылки\r\n    const activeLinkStyle = {\r\n        color: '#FF75A1',\r\n        cursor: 'pointer',\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*Навигация */}\r\n            <StyledNavbar isNavbarOpen={isNavbarOpen}>\r\n                {/*Flex обертка*/}\r\n                <StyledLinkWrapper isNavbarOpen={isNavbarOpen}>\r\n                    <StyledNavLink\r\n                        to={'/home'}\r\n                        activeStyle={activeLinkStyle}\r\n                    >\r\n                        <span className=\"material-icons\">home</span>\r\n                        {isNavbarOpen ? <StyledSpan>Home</StyledSpan> : null}\r\n                    </StyledNavLink>\r\n\r\n                    <StyledNavLink\r\n                        to={'/AllTodos'}\r\n                        activeStyle={activeLinkStyle}\r\n                    >\r\n                        <span className=\"material-icons\">library_books</span>\r\n                        {isNavbarOpen ? <StyledSpan>Todos</StyledSpan> : null}\r\n                    </StyledNavLink>\r\n\r\n                    <StyledNavLink\r\n                        to={'/NotCompletedTodos'}\r\n                        activeStyle={activeLinkStyle}\r\n                    >\r\n                        <span className=\"material-icons\">not_interested</span>\r\n                        {isNavbarOpen ? <StyledSpan>UnCompleted</StyledSpan> : null}\r\n                    </StyledNavLink>\r\n\r\n                    <StyledNavLink\r\n                        to={'/Completed'}\r\n                        activeStyle={activeLinkStyle}\r\n                    >\r\n                        <span className=\"material-icons\">check_box</span>\r\n                        {isNavbarOpen ? <StyledSpan>Completed</StyledSpan> : null}\r\n                    </StyledNavLink>\r\n                </StyledLinkWrapper>\r\n            </StyledNavbar>\r\n\r\n            {/*Кнопка открытия\\закрытия навбара*/}\r\n            <StyledToggleButton isNavbarOpen={isNavbarOpen}>\r\n                <span onClick={navbarToggle} className=\"material-icons\">arrow_back_ios</span>\r\n            </StyledToggleButton>\r\n        </>\r\n    )\r\n}\r\nexport default Navbar\r\n\r\nconst StyledToggleButton = styled.div<{ isNavbarOpen: boolean }>`\r\n    cursor: pointer;\r\n    position: fixed;\r\n    bottom: 35px;\r\n    transition: .2s;\r\n    z-index: 100;\r\n    transform: ${({isNavbarOpen}) => isNavbarOpen ? \"rotate(0)\" : \"rotate(180deg)\"};\r\n    left: ${({isNavbarOpen}) => isNavbarOpen ? \"130px\" : \"20px\"};\r\n    \r\n    &:hover {\r\n        color: rgb(255, 117, 161);\r\n    }\r\n`\r\n\r\nconst StyledLinkWrapper = styled.div<{ isNavbarOpen: boolean }>`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst StyledNavbar = styled.div<{ isNavbarOpen: boolean }>`\r\n    position: relative;\r\n    min-width: ${({isNavbarOpen}) => isNavbarOpen ? \"280px\" : \"80px\"};\r\n    min-height: calc(100vh - 80px);\r\n    background-color: #21212B;\r\n    box-shadow: inset 0px 5px 12px -3px rgba(0,0,0,0.35);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    transition: .2s;\r\n`\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\n    display: flex;\r\n    align-items: center;\r\n    text-decoration: none;\r\n    margin-top: 40px;\r\n    color: #B7B6BB;\r\n    font-size: 18px;\r\n    \r\n    &:hover {\r\n        color: #FF75A1;\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nconst StyledSpan = styled.span`\r\n    margin-left: 5px;\r\n`\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\nconst NotFoundPage: React.FC = () => {\r\n    return (\r\n        <StyledNotFoundPage>\r\n            {/*Титул и сабтитул*/}\r\n            <StyledTitle>404</StyledTitle>\r\n            <StyledSubTitle>not found</StyledSubTitle>\r\n        </StyledNotFoundPage>\r\n    )\r\n}\r\nexport default NotFoundPage\r\n\r\nconst StyledNotFoundPage = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`\r\n\r\nconst StyledTitle = styled.h1`\r\n    font-size: 260px;\r\n    line-height: 260px;\r\n`\r\n\r\nconst StyledSubTitle = styled.span`\r\n    font-size: 20px;\r\n    color: #FF75A1;\r\n`\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\nexport const HomeAnimation: React.FC = () => {\r\n    return (\r\n        // Анимация логотипа-приложения домашней страницы\r\n        <div className={'container'}>\r\n            <ul className=\"Words\">\r\n                <li className=\"Words-line\">\r\n                    <p className=\"Words-p\">&nbsp;</p>\r\n                    <p className=\"Words-p\">JetBrains</p>\r\n                </li>\r\n                <li className=\"Words-line\">\r\n                    <p className=\"Words-p\">JetBrains</p>\r\n                    <p className=\"Words-p\">InternShip</p>\r\n                </li>\r\n                <li className=\"Words-line\">\r\n                    <p className=\"Words-p\">InternShip</p>\r\n                    <p className=\"Words-p\">TodoList by</p>\r\n                </li>\r\n                <li className=\"Words-line\">\r\n                    <p className=\"Words-p\">TodoList by</p>\r\n                    <p className=\"Words-p\">Denis Bitaev</p>\r\n                </li>\r\n                <li className=\"Words-line\">\r\n                    <p className=\"Words-p\">Denis Bitaev</p>\r\n                    <p className=\"Words-p\">&nbsp;</p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {HomeAnimation} from \"../../Components/HomeTextAnimation/HomeAnimation\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HomePage: React.FC = () => {\r\n    return (\r\n        <StyledHomePage>\r\n            {/*Анимация домашней страницы*/}\r\n            <HomeAnimation />\r\n        </StyledHomePage>\r\n    )\r\n}\r\nexport default HomePage\r\n\r\nconst StyledHomePage = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    overflow: hidden;\r\n`\r\n","import {AddTodoType, DeleteTodoType, TodoActionTypes, TodoCompletedToggleType} from \"../types/todo\";\r\n\r\nexport const todoCompleteToggle = (id: number): TodoCompletedToggleType => {\r\n    return {\r\n        type: TodoActionTypes.TODO_COMPLETED_TOGGLE,\r\n        payload: id,\r\n    }\r\n}\r\n\r\nexport const deleteTodo = (id: number): DeleteTodoType => {\r\n    return {\r\n        type: TodoActionTypes.DELETE_TODO,\r\n        payload: id,\r\n    }\r\n}\r\n\r\nexport const addTodo = (todoText: string): AddTodoType=> {\r\n    return {\r\n        type: TodoActionTypes.ADD_TODO,\r\n        payload: todoText,\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteTodo} from \"../../Redux/actionCreators/todoActions\";\r\nimport styled from \"styled-components\";\r\n\r\ntype PropsTypes = {\r\n    day: string,\r\n    text: string,\r\n    isCompleted: boolean,\r\n    desc: string | undefined,\r\n    id: number,\r\n    onClick: (todo: any) => void\r\n}\r\n\r\nconst Todo: React.FC<PropsTypes> = ({id, day, text, isCompleted, desc, onClick}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteTodoHandler = () => {\r\n        dispatch(deleteTodo(id))\r\n    }\r\n\r\n    return (\r\n        <StyledTodo isCompleted={isCompleted}>\r\n\r\n            {/*Текст задачи и день недели*/}\r\n            <StyledTodoContent>\r\n                <StyledCheckbox onClick={onClick}>\r\n                    {/*Показ галочки*/}\r\n                    {\r\n                        isCompleted\r\n                            ? <span className=\"material-icons\">expand_more</span>\r\n                            : null\r\n                    }\r\n                </StyledCheckbox>\r\n\r\n                <FlexWrapper>\r\n                    <StyledTodoText isCompleted={isCompleted}>{text}</StyledTodoText>\r\n                    <StyledDayTitle isCompleted={isCompleted}>{day}</StyledDayTitle>\r\n                </FlexWrapper>\r\n            </StyledTodoContent>\r\n\r\n            {/*Кнопка удаления задачи*/}\r\n            <StyledCloseIcon isCompleted={isCompleted} onClick={deleteTodoHandler} className=\"material-icons\">\r\n                close\r\n            </StyledCloseIcon>\r\n        </StyledTodo>\r\n    )\r\n}\r\nexport default Todo\r\n\r\nconst StyledTodo = styled.div<{isCompleted: boolean}>`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    position: relative;\r\n    opacity: 1;\r\n    transition: 1s;\r\n    padding: 18px;\r\n    margin-top: 20px;\r\n    width: 60%;\r\n    min-height: 80px;\r\n    border-radius: 25px;\r\n    background-color: ${({isCompleted}) => isCompleted ? '#FFBCBC' : '#21212B'};\r\n    \r\n    &:first-of-type {\r\n        margin-top: 0;\r\n    }\r\n`\r\n\r\nconst StyledTodoContent = styled.div`\r\n    min-height: 40px;\r\n    margin-left: 18px;\r\n    display: flex;\r\n`\r\n\r\nconst FlexWrapper = styled.div`\r\n    margin-left: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst StyledCheckbox = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 25px;\r\n    height: 25px;\r\n    min-width: 25px;\r\n    min-height: 25px;\r\n    border-radius: 5px;\r\n    color: #FF75A1;\r\n    border: 3px solid #FF75A1;\r\n    \r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nconst StyledTodoText = styled.p<{isCompleted: boolean}>`\r\n    padding: 0;\r\n    font-family: Roboto, sans-serif;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: ${ ({isCompleted}) => isCompleted ? '#2F2C39' : 'darkgrey'}\r\n`\r\n\r\nconst StyledCloseIcon = styled.span<{isCompleted: boolean}>`\r\n    align-self: center;\r\n    display: flex;\r\n    right: 18px;\r\n    cursor: pointer;\r\n    color: ${ ({isCompleted}) => isCompleted ? 'black' : 'darkgrey'}\r\n`\r\n\r\nconst StyledDayTitle = styled.span<{isCompleted: boolean}>`\r\n    font-family: Roboto, sans-serif;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: ${ ({isCompleted}) => isCompleted ? '#35220b' : '#329d5f'}\r\n`\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Redux/reducers\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    todoCount: number\r\n    label: string\r\n    height: number\r\n}\r\n\r\nexport const ChartColumn:React.FC<PropsType> = ({label, todoCount, height}) => {\r\n    return (\r\n        <FlexWrapper>\r\n            {/*Лэйбл (день недели)*/}\r\n            <StyledSpan height={height}>{label + ' ' + todoCount}</StyledSpan>\r\n            {/*Колонка диаграммы выполненных задач по дням недели*/}\r\n            <StyledColumn height={height}></StyledColumn>\r\n        </FlexWrapper>\r\n    )\r\n}\r\n\r\nconst FlexWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    height:100%;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledColumn = styled.div<{height: number}>`\r\n    transition: 1s;\r\n    width: 60px;\r\n    background-color: #21212B;\r\n    height: ${({height}) => height}%;\r\n    &:hover {\r\n        background-color: rgb(255, 188, 188);\r\n    }\r\n`\r\n\r\nconst StyledSpan = styled.span<{height: number}>`\r\n    opacity: ${({height}) => height === 0 ? 0 : 1}\r\n`\r\n","import React from \"react\";\r\nimport styled from 'styled-components'\r\nimport {ChartColumn} from \"./ChartColumn/ChartColumn\";\r\n\r\ntype PropsTypes = {\r\n    data: number[]\r\n}\r\n\r\nconst ChartBar: React.FC<PropsTypes> = ({data}) => {\r\n    const labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n    const maxOfArr = Math.max(...data)\r\n\r\n    return (\r\n        <StyledChartBar>\r\n            {data.map((el: number, i: number) => {\r\n                const height = ((el / maxOfArr) * 100) || 0\r\n                return <ChartColumn\r\n                    todoCount={el}\r\n                    label={labels[i]}\r\n                    key={i}\r\n                    height={height}\r\n                />\r\n            })}\r\n        </StyledChartBar>\r\n    )\r\n}\r\nexport default ChartBar\r\n\r\nconst StyledChartBar = styled.div`\r\n    position: relative;\r\n    padding-top: 60px;\r\n    margin: 40px auto;\r\n    width: 700px;\r\n    height: 450px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n`\r\n","import React from 'react'\r\nimport Todo from \"../../Components/Todo/Todo\";\r\nimport {todoCompleteToggle} from \"../../Redux/actionCreators/todoActions\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport ChartBar from '../../Components/Chart/Chart';\r\nimport styled from \"styled-components\";\r\n\r\nconst Completed = () => {\r\n    const todos = useTypedSelector(state=> state.todos.todos)\r\n    const dispatch = useDispatch()\r\n\r\n    const makeTodoCompleted = (todo: any) => {\r\n        dispatch(todoCompleteToggle(todo.id))\r\n    }\r\n    const daysOfWeek = [\r\n        { day: \"Monday\", count: 0},\r\n        { day: \"Tuesday\", count: 0},\r\n        { day: \"Wednesday\", count: 0},\r\n        { day: \"Thursday\", count: 0},\r\n        { day: \"Friday\", count: 0},\r\n        { day: \"Saturday\", count: 0},\r\n        { day: \"Sunday\", count: 0},\r\n    ]\r\n    const data = []\r\n\r\n    // Считаем количество выполненных задач по дням недели\r\n    todos.forEach((el,i) => {\r\n        for (let i in daysOfWeek) {\r\n            if (daysOfWeek[i].day === el.day && el.completed === true) {\r\n                daysOfWeek[i].count += 1\r\n            }\r\n        }\r\n    })\r\n    // Добавляем колличество задач в массив, позже отправляем data в диаграмму для отображения\r\n    for (let i in daysOfWeek) {\r\n        data.push(daysOfWeek[i].count)\r\n    }\r\n\r\n    return (\r\n        <StyledCompletedPage>\r\n            {/*Выводим все завершенные задачи*/}\r\n            {\r\n                todos.filter(el=> el.completed === true).map((todo) => {\r\n                    return <Todo\r\n                        onClick={() => makeTodoCompleted(todo)}\r\n                        text={todo.text}\r\n                        day={todo.day}\r\n                        key={todo.id}\r\n                        desc={todo.desc}\r\n                        id={todo.id}\r\n                        isCompleted={todo.completed}\r\n                    />\r\n                })\r\n            }\r\n            {/*Диаграмма выполненных задач по дням недели*/}\r\n            <ChartBar data={data}/>\r\n        </StyledCompletedPage>\r\n    )\r\n}\r\nexport default Completed\r\n\r\nconst StyledCompletedPage = styled.div`\r\n    padding-top: 60px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\ntype PropsType = {\r\n    active: boolean,\r\n    setActive: (bol: boolean) => void,\r\n}\r\n\r\nconst Modal: React.FC<PropsType> = ({active, setActive, children}) => {\r\n    return (\r\n        // Модальное окно\r\n        <StyledModal\r\n            active={active}\r\n            onClick={() => setActive(false)}\r\n        >\r\n            <StyledModalContent active={active} onClick={e => e.stopPropagation()}>\r\n                {children}\r\n            </StyledModalContent>\r\n        </StyledModal>\r\n    )\r\n}\r\nexport default Modal\r\n\r\nconst StyledModal = styled.div<{active: boolean}>`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    opacity: ${({active}) => active ? 1 : 0};\r\n    pointer-events: ${({active}) => active ? 'all' : 'none'};\r\n    z-index: ${({active}) => active ? 100 : 0};\r\n    transition: 0.3s;\r\n`\r\n\r\nconst StyledModalContent = styled.div<{active: boolean}>`\r\n    padding: 40px;\r\n    border-radius: 25px;\r\n    background-color: rgb(33, 33, 43);\r\n    transform: ${({active}) => active ? 'scale(1)' : 'scale(0.5)'};\r\n    transition: 0.4s all;\r\n    width: 400px;\r\n    height: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n","import {ChangeEvent, useState} from \"react\";\r\nimport {useValidation} from \"./useValidation\";\r\n\r\nexport const useInput = (initialValue: any, validations: any) => {\r\n    const [value, setValue] = useState(initialValue)\r\n    const [isDirty, setDirty] = useState(false)\r\n    const valid = useValidation(value, validations)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n        setDirty(true)\r\n    }\r\n\r\n    const clearValue = () => {\r\n        setValue('')\r\n        setDirty(false)\r\n    }\r\n\r\n    const onBlur = (e: any) => {\r\n        setDirty(true)\r\n    }\r\n\r\n    return {\r\n        value,\r\n        onChange,\r\n        onBlur,\r\n        isDirty,\r\n        ...valid,\r\n        clearValue,\r\n    }\r\n}\r\n","import {useEffect, useState} from \"react\";\r\n\r\nexport const useValidation = (value: any, validations: any) => {\r\n    const [isEmpty, setEmpty] = useState(true)\r\n    const [minLengthError, setMinLengthError] = useState(false)\r\n    const [isInputValid, setInputValid] = useState(false)\r\n\r\n    useEffect( ()=> {\r\n        for (const validation in validations) {\r\n            switch (validation) {\r\n                case 'minLength':\r\n                    value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break\r\n                case 'isEmpty':\r\n                    value ? setEmpty(false) : setEmpty(true)\r\n                    break\r\n\r\n            }\r\n        }\r\n    }, [value, validations])\r\n\r\n    useEffect( ()=> {\r\n        if (isEmpty || minLengthError) {\r\n            setInputValid(false)\r\n        } else {\r\n            setInputValid(true)\r\n        }\r\n    }, [isEmpty, minLengthError])\r\n\r\n    return {\r\n        isEmpty,\r\n        minLengthError,\r\n        isInputValid\r\n    }\r\n}\r\n","import React, {useRef, useState} from 'react'\r\nimport Todo from \"../../Components/Todo/Todo\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodo, todoCompleteToggle} from \"../../Redux/actionCreators/todoActions\";\r\nimport Modal from \"../../Components/Modal/Modal\";\r\nimport {useInput} from \"../../hooks/useInput\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AllTodos: React.FC = () => {\r\n    const todoAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [active, setActive] = useState(false)\r\n    const todos = useTypedSelector( state => state.todos.todos)\r\n    const dispatch = useDispatch()\r\n    const todoText = useInput('', {isEmpty: true, minLength: 5})\r\n\r\n    const makeTodoCompleted = (todo: any) => {\r\n        dispatch(todoCompleteToggle(todo.id))\r\n    }\r\n\r\n    const addTodoHandler = () => {\r\n        dispatch(addTodo(todoText.value))\r\n        // Закрытие модалки и очистка инпутов\r\n        setActive(false)\r\n        todoText.clearValue()\r\n        // Скроллинг к добавленной задаче\r\n        setTimeout(()=> {\r\n            todoAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }, 200)\r\n    }\r\n\r\n    return (\r\n        <StyledAllTodos>\r\n            <Modal active={active} setActive={setActive}>\r\n                <StyledInputLabel htmlFor=\"todotext\">Todo text</StyledInputLabel>\r\n\r\n                {/*Текст об ошибке - путое значение*/}\r\n                {(todoText.isDirty && todoText.isEmpty) && <div style={{color: 'red'}}>Напишите что-нибудь</div>}\r\n                {/*Текст об ошибке - минимальная длина */}\r\n                {(todoText.isDirty && todoText.minLengthError) && <div style={{color: 'red'}}>Минимальная длина - 5</div>}\r\n\r\n                {/*input*/}\r\n                <StyledTextInput\r\n                    id=\"todotext\"\r\n                    type=\"text\"\r\n                    value={todoText.value}\r\n                    onChange={e => todoText.onChange(e)}\r\n                    onBlur={e => todoText.onBlur(e)}\r\n                />\r\n\r\n                {/*Кнопка добавления задачи*/}\r\n                <StyledAddTodoBtn\r\n                    disabled={!todoText.isInputValid}\r\n                    onClick={addTodoHandler}\r\n                >\r\n                    add\r\n                </StyledAddTodoBtn>\r\n            </Modal>\r\n\r\n            {/*Вывод всех задач*/}\r\n            {\r\n                todos.map((todo) => {\r\n                    return <Todo\r\n                                onClick={() => makeTodoCompleted(todo)}\r\n                                text={todo.text}\r\n                                day={todo.day}\r\n                                key={todo.id}\r\n                                desc={todo.desc}\r\n                                id={todo.id}\r\n                                isCompleted={todo.completed}\r\n                            />\r\n                })\r\n            }\r\n            {/*Якорь для скролинга к выполненной задачи*/}\r\n            <div ref={todoAnchorRef}></div>\r\n\r\n            {/*Кнопка открытия модального окна для добавления новой задачи*/}\r\n            <StyledModalBtn onClick={()=> setActive(true)}>\r\n                <span style={{fontSize: '40px'}} className=\"material-icons\">add_circle_outline</span>\r\n            </StyledModalBtn>\r\n        </StyledAllTodos>\r\n    )\r\n}\r\nexport default AllTodos\r\n\r\nconst StyledAllTodos = styled.div`\r\n    padding-top: 60px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding-bottom: 60px;\r\n`\r\n\r\nconst StyledModalBtn = styled.button`\r\n    all: unset;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    z-index: 100;\r\n    right: 40px;\r\n    bottom: 40px;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 100px;\r\n    color: #329D5F;\r\n    cursor: pointer;\r\n    background-color: #21212B;\r\n    outline: none;\r\n    transition: .4s;\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    }\r\n`\r\n\r\nconst StyledTextInput = styled.input`\r\n    height: 40px;\r\n    outline: none;\r\n    padding: 5px;\r\n    color: rgb(33, 33, 43);\r\n    font-size: 20px;\r\n    margin: 10px 0;\r\n`\r\n\r\nconst StyledInputLabel = styled.label`\r\n    font-size: 30px;\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n`\r\n\r\nconst StyledAddTodoBtn = styled.button`\r\n    height: 40px;\r\n    background: #B7B6BB;\r\n    color: black;\r\n    font-size: 20px;\r\n    cursor: pointer;\r\n    transition: .6s;\r\n\r\n    &::disabled {\r\n    background-color: #181820;\r\n    color: #434343;\r\n}\r\n`\r\n","import React from 'react'\r\nimport Todo from \"../../Components/Todo/Todo\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {todoCompleteToggle} from \"../../Redux/actionCreators/todoActions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NotCompletedTodos = () => {\r\n    const todos = useTypedSelector(state=> state.todos.todos)\r\n    const dispatch = useDispatch()\r\n\r\n    const makeTodoCompleted = (todo: any) => {\r\n        dispatch(todoCompleteToggle(todo.id))\r\n    }\r\n\r\n    return (\r\n        <StyledNotCompletedPage>\r\n            {/*Выводим НЕ завершенные задачи*/}\r\n            {\r\n                todos.filter(el=> el.completed !== true).map((todo) => {\r\n                    return <Todo\r\n                        onClick={() => makeTodoCompleted(todo)}\r\n                        text={todo.text}\r\n                        day={todo.day}\r\n                        key={todo.id}\r\n                        desc={todo.desc}\r\n                        id={todo.id}\r\n                        isCompleted={todo.completed}\r\n                    />\r\n                })\r\n            }\r\n        </StyledNotCompletedPage>\r\n    )\r\n}\r\nexport default NotCompletedTodos\r\n\r\nconst StyledNotCompletedPage = styled.div`\r\n    padding-top: 60px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-direction: column;   \r\n`\r\n","import React, {useState} from 'react';\nimport {Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Header from \"./Components/Header/Header\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport NotFoundPage from \"./Pages/NotFoundPage/NotFoundPage\";\nimport HomePage from \"./Pages/HomePage/HomePage\";\nimport Completed from \"./Pages/Completed/Completed\";\nimport AllTodos from \"./Pages/AllTodos/AllToodos\";\nimport NotCompletedTodos from \"./Pages/NotCompletedTodos/NotCompletedTodos\";\n\nfunction App() {\n    const [isNavbarOpen, setNavbarOpen] = useState(true)\n\n    const navbarToggle = () => {\n        setNavbarOpen( prevState => !prevState)\n    }\n\n    return (\n        <div>\n            <Header/>\n            <div className={'content'} style={{display: 'flex'}}>\n                <Navbar isNavbarOpen={isNavbarOpen} navbarToggle={navbarToggle}/>\n                <Switch>\n                    <Route path={'/AllTodos'} exact component={AllTodos}/>\n                    <Route path={'/NotCompletedTodos'} exact component={NotCompletedTodos}/>\n                    <Route path={'/Completed'} exact component={Completed}/>\n                    <Route path={'/home'} exact component={HomePage}/>\n                    <Redirect from='/' to='/home'/>\n                    <Route path={'*'} exact component={NotFoundPage}/>\n                </Switch>\n            </div>\n        </div>\n    );\n}\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {TodoActions, TodoActionTypes, todoState} from \"../types/todo\";\r\nimport data from '../../data.json'\r\n\r\nconst {todos} = (localStorage[\"data\"]) ? JSON.parse(localStorage[\"data\"]) : data\r\n\r\nconst initialState: todoState = {\r\n    todos: todos\r\n}\r\n\r\nexport const todoReducer = (state = initialState, action: TodoActions): todoState => {\r\n    switch (action.type) {\r\n        case TodoActionTypes.TODO_COMPLETED_TOGGLE:\r\n            const prevTodo = state.todos.map( el => {\r\n                if (el.id === action.payload) {\r\n                    el.completed = !el.completed\r\n                }\r\n                return el\r\n            })\r\n            return {\r\n                ...state, todos: prevTodo\r\n            }\r\n        case TodoActionTypes.DELETE_TODO:\r\n            return {\r\n                ...state, todos: state.todos.filter(todo => todo.id !== action.payload)\r\n            }\r\n        case TodoActionTypes.ADD_TODO:\r\n            const day = new Date().getDay()\r\n            const dayEnglish = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n            const newTodo = {\r\n                id: state.todos.length + 1,\r\n                text: action.payload,\r\n                day: dayEnglish[day],\r\n                completed: false\r\n            }\r\n            const todos = state.todos\r\n            todos.push(newTodo)\r\n            return {\r\n                ...state, todos: todos\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {todoReducer} from \"./todoReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todos: todoReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof  rootReducer>\r\n","import {createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers\";\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nstore.subscribe(() => {\r\n    localStorage[\"data\"] = JSON.stringify(store.getState().todos)\r\n})\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}